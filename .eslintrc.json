{
  "parser": "@typescript-eslint/parser",
  "parserOptions": {},
  "root": true,
  "env": {
    "browser": true,
    "es2020": true
  },
  "extends": [
    "eslint:recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:react/recommended",
    "plugin:react-hooks/recommended",
    "plugin:import/recommended",
    "plugin:import/errors",
    "plugin:import/warnings",
    "plugin:import/typescript",
    "plugin:react/jsx-runtime",
    "plugin:jsdoc/recommended-typescript"
  ],
  "ignorePatterns": ["dist"],
  "plugins": [
    "react",
    "react-refresh",
    "import",
    "jsdoc",
    "@typescript-eslint",
    "@typescript-eslint/eslint-plugin"
  ],
  "rules": {
    "no-console": "warn",
    "no-debugger": "warn",
    "jsdoc/check-alignment": ["warn"],
    "jsdoc/sort-tags": ["warn"],
    "jsdoc/valid-types": ["warn"],
    "jsdoc/check-indentation": ["warn"],
    "jsdoc/check-param-names": ["warn"],
    "jsdoc/tag-lines": ["warn", "any", { "startLines": 1 }],
    "jsdoc/check-tag-names": [
      "warn",
      {
        "typed": true,
        "definedTags": [
          "component",
          "info",
          "group",
          "prop",
          "sonar-noscan-start",
          "sonar-noscan-end"
        ]
      }
    ],
    "jsdoc/require-jsdoc": ["off"],
    /* We can turn this on (jsdoc/require-param), */
    /* once we'll find a way to exclude component props (when @component is used). */
    "jsdoc/require-param": ["off"],
    "@typescript-eslint/consistent-type-imports": "error",
    "@typescript-eslint/no-import-type-side-effects": "error",
    "object-curly-spacing": ["error", "always"],
    "import/no-unresolved": "error",
    "import/consistent-type-specifier-style": ["error", "prefer-top-level"],
    "import/order": [
      "warn",
      {
        "groups": [
          "builtin",
          "external",
          "internal",
          "parent",
          "sibling",
          "index",
          "unknown"
        ],
        "newlines-between": "always",
        "alphabetize": {
          "order": "asc",
          "caseInsensitive": true
          /* sort in ascending order. Options: ['ignore', 'asc', 'desc'] */
          /* ignore case. Options: [true, false] */
        },
        "pathGroups": [
          {
            "pattern": "react",
            "group": "external",
            "position": "before"
          }
        ],
        "pathGroupsExcludedImportTypes": ["react"]
      }
    ],
    "@typescript-eslint/consistent-type-assertions": [
      "error",
      {
        "assertionStyle": "as",
        "objectLiteralTypeAssertions": "allow"
      }
    ],
    "import/no-named-as-default-member": ["error"],
    "react/jsx-curly-brace-presence": [
      "warn",
      { "props": "never", "children": "never" }
    ],
    "react-refresh/only-export-components": [
      "warn",
      { "allowConstantExport": true }
    ],
    "import/no-restricted-paths": [
      "error",
      {
        "zones": [
          {
            /* Zone Layer of Elements */
            "target": "src/elements/**",
            "from": "src/app/**",
            "message": "Layer of elements can't import layer of app"
          },
          {
            "target": "src/elements/**",
            "from": "src/pages/**",
            "message": "Layer of elements can't import layer of pages"
          },
          {
            "target": "src/elements/**",
            "from": "src/modules/**",
            "message": "Layer of elements can't import layer of modules"
          },
          {
            "target": "src/elements/**",
            "from": "src/components/**",
            "message": "Layer of elements can't import layer of components"
          },
          {
            /* Zone Layer of Components */
            "target": "src/components/**",
            "from": "src/app/**",
            "message": "Layer of components can't import layer of app"
          },
          {
            "target": "src/components/**",
            "from": "src/pages/**",
            "message": "Layer of components can't import layer of pages"
          },
          {
            "target": "src/components/**",
            "from": "src/modules/**",
            "message": "Layer of components can't import layer of modules"
          },
          {
            /* Zone Layer of Modules */
            "target": "src/modules/**",
            "from": "src/app/**",
            "message": "Layer of modules can't import layer of app"
          },
          {
            "target": "src/modules/**",
            "from": "src/pages/**",
            "message": "Layer of modules can't import layer of pages"
          },
          {
            /* Zone Layer of Pages */
            "target": "src/pages/**",
            "from": "src/app/**",
            "message": "Layer of pages can't import layer of app"
          }
        ]
      }
    ],
    "no-restricted-imports": [
      "error",
      {
        "paths": [{ "name": "lodash" }],
        "patterns": [
          {
            "group": ["**/../../*", "!**/../../slice"],
            "message": "Import can't use a relative path with more than 1 attachments"
          },
          {
            "group": ["**.tsx", "**.ts", "**/index"],
            "message": "Import can't use the ending (.tsx, ts, index)."
          },
          {
            "group": ["**/component", "!./component", "!../component"],
            "message": "Import can't use the ending (component), you must import Component with index."
          },
          {
            "group": [
              "@modules/**/slice",
              "@modules/**/selector",
              "@modules/**/hook",
              "@modules/**/component",
              "@modules/**/constants",
              "@modules/**/utils",
              "@modules/**/context"
            ],
            "message": "Import can't use module nesting (slice, selector, hook, component, constants, utils, context), use public path of module (index)"
          }
        ]
      }
    ]
  },
  "overrides": [
    {
      "files": ["./**/*.ts"],
      "excludedFiles": ["./**/*.spec.ts"]
    }
  ],
  "settings": {
    "react": {
      "version": "detect"
    },
    "import/parsers": {
      "@typescript-eslint/parser": [".ts", ".tsx"]
    },
    "import/resolver": {
      "typescript": {
        "alwaysTryTypes": true,
        "extensions": [".ts", ".tsx"]
      }
    }
  }
}
